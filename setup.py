#!/usr/bin/env python3
"""
AI dev note: Script de setup para a Guido API
Este script facilita a configura√ß√£o inicial do projeto
"""

import os
import subprocess
import sys
from pathlib import Path


def run_command(command, description):
    """AI dev note: Executar comando e mostrar descri√ß√£o"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao {description.lower()}: {e}")
        print(f"Sa√≠da de erro: {e.stderr}")
        return False


def create_env_file():
    """AI dev note: Criar arquivo .env se n√£o existir"""
    env_file = Path(".env")
    if not env_file.exists():
        print("\nüìù Criando arquivo .env...")
        try:
            with open(".env.example", "r") as example_file:
                example_content = example_file.read()
            
            with open(".env", "w") as env_file:
                env_file.write(example_content)
            
            print("‚úÖ Arquivo .env criado com sucesso!")
            print("‚ö†Ô∏è  Lembre-se de configurar as vari√°veis de ambiente no arquivo .env")
            return True
        except FileNotFoundError:
            print("‚ùå Arquivo .env.example n√£o encontrado!")
            return False
    else:
        print("‚úÖ Arquivo .env j√° existe!")
        return True


def main():
    """AI dev note: Fun√ß√£o principal do setup"""
    print("üöÄ Configurando Guido API...")
    
    # Verificar se Python est√° instalado
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    
    # Criar ambiente virtual
    if not run_command("python -m venv venv", "Criando ambiente virtual"):
        sys.exit(1)
    
    # Ativar ambiente virtual e instalar depend√™ncias
    if os.name == "nt":  # Windows
        activate_cmd = "venv\\Scripts\\activate"
        pip_cmd = "venv\\Scripts\\pip"
    else:  # Unix/Linux/Mac
        activate_cmd = "source venv/bin/activate"
        pip_cmd = "venv/bin/pip"
    
    if not run_command(f"{pip_cmd} install -r requirements.txt", "Instalando depend√™ncias"):
        sys.exit(1)
    
    # Criar arquivo .env
    if not create_env_file():
        sys.exit(1)
    
    print("\nüéâ Setup conclu√≠do com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Ative o ambiente virtual:")
    if os.name == "nt":
        print("   venv\\Scripts\\activate")
    else:
        print("   source venv/bin/activate")
    
    print("2. Configure as vari√°veis de ambiente no arquivo .env")
    print("3. Execute a API:")
    print("   uvicorn app.main:app --reload")
    print("4. Acesse a documenta√ß√£o: http://localhost:8000/docs")


if __name__ == "__main__":
    main() 